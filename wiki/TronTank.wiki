#summary A view sync version of tron tank webgl demo using websocket

= SceneJS Tron Tank on Liquid Galaxy WebGL Demo =

<img width="800" height="404" src="https://lh5.googleusercontent.com/-s5QRqge5_U0/ThfsHpWbTjI/AAAAAAAABTU/PsvM5ID93B0/s800/tron-wide.jpg">

== Introduction ==

Firstly a huge *thankyou* to [http://www.retaggr.com/page/LindsayStanleyKay Lindsay Kay] and [http://www.scenejs.org/ SceneJS] for the Tron Tank demo, and [http://www.greggman.com/ Gregg Tavares] and Rehno for helping to get the view offset maths working!

This is just a hack to find out if !WebSocket is viable for achieving multi-machine view synchronisation for WebGL apps.

These variables are sent from the Master to the Slave webGL instances -

  * tankYaw (degrees) - rotation of tank wrt to grid plane
  * tankPos (x,y,z) - position of tank in the world
  * eyePos (x,y,z) - position of camera in the world

The middle machine is the _Master_ view. We control the tank on the _Master_ and changes are reflected in the _Slave_ views to the left and right.

The camera on the _Master_ always !LooksAt tankPos (the is what the original demo does).

The _Slaves_ are arranged in a semi-circle, the slave views should be slightly to the 'left' and 'right' (Y axis rotations, I think) so a new camera view must be calculated on each _Slave_.

== How to Build ==

  # Grab the original "tron-tank" source from [http://scenejs.org/dist/curr/extr/examples/tron-tank/index.html SceneJS examples site]. Place this on a local webserver. Test that the original Tron Tank app works with your browser.
  # Download the Perl libraries needed for "relay_websocket.pl" from [http://showmetheco.de/articles/2010/11/timtow-to-build-a-websocket-server-in-perl How To build a WebSocket server in Perl]. Basically get !ReAnimator installed and the demos working from [https://github.com/vti/reanimator https://github.com/vti/reanimator]. May require some support libraries like !EventReactor.
  # Run some of the example !WebSocket Perl services. eg. the 'browser chat' to confirm !WebSocket is working with your browser.
  # Download *tronlg.html*, *tron-tank-lg.js* and *relay_websocket.pl* from this source repo [http://code.google.com/p/wonderama/source/browse/#svn%2Ftrunk%2Ftron-tank /trunk/tron-tank/]
  # Place *tronlg.html* and *tron-tank-lg.js* in the examples/tron-tank folder for the scenejs tron tank (from step 1).
  # Place *relay_websocket.pl* in the examples/ folder for vti's !ReAnimator Perl lib (from step 2). The relay is a basic modification of the "echo" example in that folder.
  # Modify *tron-tank-lg.js* replacing the !WebSocket server IP address with the IP of the machine running your Perl !WebSocket relay'er.
  # There are variables in *tron-tank-lg.js* to set the fov and bezel multiplier. If you've gotten this far, you'll know what to do!

<img align="right" width="288" height="200" src="http://lh3.googleusercontent.com/-bYHMhI3ZmCU/ThfqMz6AbnI/AAAAAAAABTM/94IXWApw3JU/s288/tron-big2.jpg">
== How to run it ==

  # Run the Perl service *./relay_websocket.pl*
  # From a webgl browser on the middle machine access *http://.../tronlg.html?master *
  # on the right-hand screens access *http://.../tronlg.html?rot=-1 * or -2, -3, etc.
  # on the left-hand machines use *http://.../tronlg.html?rot=1 * or 2, 3, etc.
  # Use mouse on the Master instance to control the tank and camera position.

You should run the Master (center) up first, followed by the slaves. After the initial setup you can reload any instance and things will work, since the Master view is the only one transmitting.

== What needs fixing == 

  * ~~slave view offsets aren't right, trying pitching up towards 90 degrees. 3D matrix maths anyone?~~
    * ~~probably something in cameraLookAt() function~~ _Slave needed to get 'up' vector from Master for setting it's !LookAt 'up'_
  * the websocket relay needs smarts to differentiate master and slave clients and when to drop clients.
  * need to dynamically resize and fullscreen the canvas. CSS?
  * ~~the camera (eye) doesn't seem to go all the way down to the ground anymore. pitch code may be broken on master.~~ _eye.Y was limited to >20 reduced to 2_
  * code cleanup because of my hack job!

== Future Ideas ==

  * replace the Perl !WebSocket relayer with something easier to package? NodeJS?
    * How about a !WebSocket 'service' in !JavaScript on the Master instance?
  * grid texture is a bit so-so, replace it with better image or draw it.
  * on the slave display "Waiting for MCP..." until the first view packet arrives.
  * sky/box around grid field.
  * home key press to return to the middle of the grid.
  * add user-controllable or orbiting camera in addition to the "swing to front" cam.
  * driving the tank point-of-view cam.
  * animate tracks on tank model.
  * object detection. at the moment the tank can drive through walls.
  * procedural city/block model generator.
  * ability to fire the canon (projectile + recoil) and blow stuff up!
  * need to find a !SpaceNavigator Javascript control? Perhaps [http://code.google.com/p/javascript-joystick/ javascript-joystick] will do.
  * sound fx, followed by spatial sound fx
  * other tanks and light cycles.
  * multiplayer tanks, network play, etc.
  * 2d overview map, compass, radar, headsup display, map/maze builder
  * revitalize and/or re-use code from [http://kernigh.pbworks.com/w/page/9214137/Xtank Xtank] (early 1990's) or [http://www.gltron.org/ GLtron]  _...getting carried away..._
 