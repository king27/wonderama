#summary A view sync version of tron tank webgl demo using websockets

= SceneJS Tron Tank on Liquid Galaxy WebGL Demo =

<img width="720" height="405" src="https://lh5.googleusercontent.com/-ikvunZb7Lsc/Tg1mTIlLFHI/AAAAAAAABRA/7cJA2rEoWek/s720/trongl-2-wonderama.JPG">

== Introduction ==

Firstly a huge *thankyou* to [http://www.retaggr.com/page/LindsayStanleyKay Lindsay Kay] and [http://www.scenejs.org/ SceneJS] for the Tron Tank demo, and [http://www.greggman.com/ Gregg Tavares] for helping to get the view offset maths working this far!

This is just a quick hack to see whether !WebSocket is viable for achieving multi-machine view synchronisation with WebGL apps.

These variables are sent from the master to the slave views..

  # tankYaw (degrees) - rotation of tank wrt to grid plane
  # tankPos (x,y,z) - position of tank in the world
  # eyePos (x,y,z) - position of camera in the world

For the master view the camera always !LooksAt !TankPos, the slave views are supposed to calculate offset views (doesn't quite work :)

*The view sync bit is working, but the matrix math to align/offset the views isn't quite right. Please HELP!*

== How to Build ==

  # Grab the original "tron-tank" source from [http://scenejs.org/dist/curr/extr/examples/tron-tank/index.html SceneJS examples site]. Place this on a local webserver. Test that the original Tron Tank app works with your browser.
  # Download the Perl libraries needed for "relay_websocket.pl" from [http://showmetheco.de/articles/2010/11/timtow-to-build-a-websocket-server-in-perl How To build a WebSocket server in Perl]. Basically get !ReAnimator installed and the demos working from [https://github.com/vti/reanimator https://github.com/vti/reanimator]. It may require some support libraries like !EventReactor.
  # Run some of the example !WebSocket Perl services. eg. the 'browser chat' to confirm !WebSocket is working with your browser.
  # Download tronlg.html, tron-tank-lg.js and relay_websocket.pl from this source repo [http://code.google.com/p/wonderama/source/browse/#svn%2Ftrunk%2Ftron-tank /trunk/tron-tank/]
  # Place tronlg.html and tron-tank-lg.js in the examples/tron-tank folder for the scenejs tron tank (setup in 1 above).
  # Place relay_websocket.pl in the examples/ folder for vti's !ReAnimator Perl lib (setup in 2 above). The relay is a basic modification of the !WebSocket "echo" script in that folder.
  # Modify tron-tank-lg.js replacing the !WebSocket server IP address with the IP of the machine running your Perl !WebSocket relay'er.
  # There are variables in tron-tank-lg.js to set the fov and bezel multiplier. If you've gotten this far, you'll know what to do!

== How to run it ==

  # *./relay_websocket.pl*
  # From webgl browser access */tronlg.html?master* (center)
  # */tronlg.html?rot=-1* (or -2, -3, etc) right-side views
  # */tronlg.html?rot=1* (or 2, 3, etc) left-side views
  # Use mouse in the Master instance to control the tank and camera position

You should run the Master (center) up first, followed by the slaves. After the initial setup you can reload any instance and things will work, as the Master view is the only one transmitting.

== What needs fixing == 

  # slave view offsets aren't right, trying pitching up towards 90 degrees! 3D matrix maths anyone?
  # websocket perl relay needs smarts about differentiating master and slave clients and when to "drop" clients? 
  # better way to resize/fullscreen canvas?
  # camera/eye position (pitch) doesn't seem to go all the way down to the ground anymore?
  # might be nice to add user-controllable or orbit camera in addition to the "swing to front" one.
  # huge code cleanup because of my hack job! 