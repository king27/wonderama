#summary A view sync version of tron tank webgl demo using websockets

= Introduction =

Multi-machine view synchronisation attempt for a WebGL app.

These variables are sent from the master to the slave views..

  # tankYaw (degrees) - rotation of tank
  # tankPos (x,y,z) - position of tank in the world
  # eyePos (x,y,z) - position of camera in the world

For the master view the camera always !LooksAt !TankPos, the slave views are supposed to calculate offset views (doesn't quite work :)

*The viewsync bit is working, but the matrix math to align/offset the views isn't quite right. Please HELP!*

= How to Build =

  # Grab the original "tron-tank" source from [http://scenejs.org/dist/curr/extr/examples/tron-tank/index.html SceneJS examples site]
  # Download Perl libraries needed for "relay-websocket.pl" see [http://showmetheco.de/articles/2010/11/timtow-to-build-a-websocket-server-in-perl WebSocket in Perl].
  # Setup the Perl service test it with some of the simple examples.
  # Download tronlg.html, tron-tank-lg.js and relay-websocket.pl from this source repo /trunk/tron-tank/
  # Place tronlg.html and tron-tank-lg.js in the examples/tron-tank folder for the scenejs tron tank.
  # Place relay-websocket.pl in the examples/ folder for vti's ReAnimator Perl lib.
  # Modify tron-tank-lg.js replacing the WebSocket server IP address with the IP of the machine running the Perl Websocket relay'er.

= How to run it =

  # ./relay_websocket.pl
  # From webgl browser access /tronlg.html?master (center)
  # /tronlg.html?rot=-1 (right)
  # /tronlg.html?rot=1 (left)





